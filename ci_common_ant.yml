.global_template_ant:
  # Use interruptible to indicate that a running job should be canceled if made redundant by a newer pipeline run. https://docs.gitlab.com/ee/ci/yaml/README.html#interruptible 
  interruptible: true
  tags:
    # Run on AKS runner
    - kubernetes
  extends:
    - .default-retry   # global_gitlab_rules/common_rules.yml
  # More info about images https://devcloud.ubs.net/ubs-ag/gt/ib-it/ib-tech-gb-cross-product/devops-tools/aa45252-gbdevops/docker-base-image
  image: container-registry.ubs.net/ubs/gbdevops/docker-base-image-ant-openjdk-1.8:v3.4
  variables:
    DYNAMIC_MUTLI_PROJECT_PIPELINE_RELEASE: "false"
    # support submodules
    GIT_SUBMODULE_STRATEGY: recursive 
    #variable for placement of build.xml
    where_is_build_xml: "${CI_PROJECT_DIR}/build.xml"
    where_trigger_ant_build: "."
    ANT_ARTIFACTS: "${CI_PROJECT_DIR}/*.zip"
    ANT_TARGET_SNAPSHOT: ""
    ANT_CUSTOM_PARAMETERS_SNAPSHOT: ""
    # add option to provide user and password
    ANT_EXTRA_PARAMETERS_SNAPSHOT: "-DNEXUS_USER=$NEXUS_USER -DNEXUS_PASSWORD=$NEXUS_PASSWORD -DnexusUsername=$NEXUS_USER -DnexusPassword=$NEXUS_PASSWORD"
    ANT_TARGET_RELEASE: ""
    ANT_CUSTOM_PARAMETERS_RELEASE: ""
    # add option to provide user and password
    ANT_EXTRA_PARAMETERS_RELEASE: "-DNEXUS_USER=$NEXUS_USER -DNEXUS_PASSWORD=$NEXUS_PASSWORD -DnexusUsername=$NEXUS_USER -DnexusPassword=$NEXUS_PASSWORD"
    ANT_FEATURE_BRANCH_VERSION: "false"    # Add feature to choose SNAPSHOT version $BRANCH.$CI_COMMIT_SHORT_SHA-SNAPSHOT or $BRANCH-SNAPSHOT
    FORTIFY_REPORT_UPLOAD: "false"   # option to enable fortify report after release for every release under report stage  - maven approach more /fortify/ant.yml
    # ARCHIVE configuration -> bash/functions.yml -> Function Archives - Support tar.tar.gz and zip
    DEPLOY_ARCHIVE_FILE_ZIP_ROOT_DIR: "${CI_PROJECT_DIR}" #place where we zipp/tar files provided
    DEPLOY_ARCHIVE_FILE_ZIP_RELEASE: ''         #'[$CI_PROJECT_DIR/test.zip;$CI_PROJECT_DIR/dev/output,$CI_PROJECT_DIR/dev/config/tg.xml]
                                                # [$CI_PROJECT_DIR/test1.tar.gz;$CI_PROJECT_DIR/dev/output,$CI_PROJECT_DIR/dev/config/tg.xml]
                                                # [$CI_PROJECT_DIR/test1.tar;$CI_PROJECT_DIR/dev/output,$CI_PROJECT_DIR/dev/config/tg.xml]'
                                                # [Path_where_artifact_file_with_extesion;path_to_files_directories_seperated_comma]
    DEPLOY_ARCHIVE_FILE_ZIP_SNAPSHOT: ''        #'[$CI_PROJECT_DIR/test.zip;$CI_PROJECT_DIR/dev/output,$CI_PROJECT_DIR/dev/config/tg.xml]
                                                # [$CI_PROJECT_DIR/test1.tar.gz;$CI_PROJECT_DIR/dev/output,$CI_PROJECT_DIR/dev/config/tg.xml]
                                                # [$CI_PROJECT_DIR/test1.tar;$CI_PROJECT_DIR/dev/output,$CI_PROJECT_DIR/dev/config/tg.xml]'
                                                # [Path_where_artifact_file_with_extesion;path_to_files_directories_seperated_comma]
    # NEXUS UPLOAD configuration -> powershell/functions.yml -> Function Publish-Artifacts
    # Common
    DEPLOY_FILE_MAVEN_GROUP_ID: ""                                  # com.ubs.gbdevops
    DEPLOY_FILE_MAVEN_GENERATE_POM: "true"
    # release
    NEXUS_USER_RELEASE: "$NEXUS_USER"
    NEXUS_PASSWORD_RELEASE: "$NEXUS_PASSWORD"
    DEPLOY_FILE_MAVEN_REPOSITORY_ID_RELEASE: ""                     # deploy-shared-066-release
    DEPLOY_FILE_MAVEN_REPOSITORY_URL_RELEASE: ""                    # https://nexus-write.ldn.swissbank.com/nexus/content/repositories/deploy-shared-066-release/
    DEPLOY_FILE_MAVEN_MAIN_AND_CONFIG_RELEASE: ''                   #'[BP-TC-02-Proxy,$CI_PROJECT_DIR\BP-TC-02-Proxy.$CI_COMMIT_TAG.zip;dev,fdfdf;qa,qtg]
                                                                    # [BP-TC-01-Proxy,$CI_PROJECT_DIR\BP-TC-01-Proxy.$CI_COMMIT_TAG.zip;dev1,fdfdf1;qa1,qtg1]'
                                                                    # [artifactid_for_main_file,path_to_main_file;classifier1,path_to_config_for_classifier1;classifier2,path_to_config_for_classifier2;classifier3...]
    # snapshot
    NEXUS_USER_SNAPSHOT: "$NEXUS_USER"
    NEXUS_PASSWORD_SNAPSHOT: "$NEXUS_PASSWORD"
    DEPLOY_FILE_MAVEN_REPOSITORY_ID_SNAPSHOT: ""                    # deploy-shared-066-snapshot
    DEPLOY_FILE_MAVEN_REPOSITORY_URL_SNAPSHOT: ""                   # https://nexus-write.ldn.swissbank.com/nexus/content/repositories/deploy-shared-066-snapshot/
    DEPLOY_FILE_MAVEN_MAIN_AND_CONFIG_SNAPSHOT: ''                  # '[BP-TC-02-Proxy,$CI_PROJECT_DIR\BP-TC-02-Proxy.$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHORT_SHA-SNAPSHOT.zip;dev,fdfdf;qa,qtg]
                                                                    # [BP-TC-01-Proxy,$CI_PROJECT_DIR\BP-TC-01-Proxy.$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHORT_SHA-SNAPSHOT.zip;dev1,fdfdf1;qa1,qtg1]'
                                                                    # [artifactid_for_main_file,path_to_main_file;classifier1,path_to_config_for_classifier1;classifier2,path_to_config_for_classifier2;classifier3...]
    SONAR_SCAN: "false"   # option to enable scan sonar check under checks stage validation via quality gate setup in sonar server
    SONAR_REPORT_UPLOAD: "false"   # option to enable sonar report after release for every release under report stage
    SKIP_DEPLOY_TO_NEXUS: "false"   # option to build and archive artifacts without uploading to nexus


.ant_build:
  version_snapshot:
    # - >
    #   if [[ "$NEXUS_PASSWORD" == "" ]]; then
    #     NEXUS_PASSWORD=$(echo "$NEXUS_PASSWORD_64" | base64 -d)
    #   fi
    - >
      if [[ "$EVA_INTEGRATION" == "true" ]]; then
        export ANT_EXTRA_PARAMETERS_SNAPSHOT="$ANT_EXTRA_PARAMETERS_SNAPSHOT -DNEXUS_USER=$NEXUS_USER -DNEXUS_PASSWORD=$NEXUS_PASSWORD -DnexusUsername=$NEXUS_USER -DnexusPassword=$NEXUS_PASSWORD"
      fi
    - echo "$CI_COMMIT_BRANCH"
    - echo "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - >
        if [[ $ANT_FEATURE_BRANCH_VERSION  == "true" ]]; then
          echo "Build artifact version like BRANCH-SNAPSHOT"
          export DEPLOY_FILE_MAVEN_VERSION_SNAPSHOT="$CI_COMMIT_REF_SLUG-SNAPSHOT"
          export artifact_version="$CI_COMMIT_REF_SLUG-SNAPSHOT"
          echo "DEPLOY_FILE_MAVEN_VERSION_SNAPSHOT=$DEPLOY_FILE_MAVEN_VERSION_SNAPSHOT"
          echo "ant_artifact_version=$DEPLOY_FILE_MAVEN_VERSION_SNAPSHOT" >> ant_dynvar_$CI_JOB_ID.env
        else
          echo "Build artifact version like BRANCH.CI_COMMIT_SHORT_SHA-SNAPSHOT"
          export DEPLOY_FILE_MAVEN_VERSION_SNAPSHOT="$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHORT_SHA-SNAPSHOT"
          export artifact_version="$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHORT_SHA-SNAPSHOT"
          echo "ant_artifact_version=$DEPLOY_FILE_MAVEN_VERSION_SNAPSHOT" >> ant_dynvar_$CI_JOB_ID.env
        fi
    - >
      if [[ ! -z "$MVN_SETTINGS" ]]; then
          if [[ ${MVN_SETTINGS:0:1} == "/" ]]; then
            cat $MVN_SETTINGS > ${CI_PROJECT_DIR}/settings.xml
          else
            echo "$MVN_SETTINGS" > ${CI_PROJECT_DIR}/settings.xml
          fi
      fi

  version_release:
    # - >
    #   if [[ "$NEXUS_PASSWORD" == "" ]]; then
    #     NEXUS_PASSWORD=$(echo "$NEXUS_PASSWORD_64" | base64 -d)
    #   fi
    - >
      if [[ "$EVA_INTEGRATION" == "true" ]]; then
        export ANT_EXTRA_PARAMETERS_RELEASE="$ANT_EXTRA_PARAMETERS_RELEASE -DNEXUS_USER=$NEXUS_USER -DNEXUS_PASSWORD=$NEXUS_PASSWORD -DnexusUsername=$NEXUS_USER -DnexusPassword=$NEXUS_PASSWORD"
      fi
    - export artifact_version="$CI_COMMIT_TAG"
    - export DEPLOY_FILE_MAVEN_VERSION_RELEASE="$CI_COMMIT_TAG"
    - echo "DEPLOY_FILE_MAVEN_VERSION_RELEASE=$DEPLOY_FILE_MAVEN_VERSION_RELEASE"
    - echo "ant_artifact_version=$DEPLOY_FILE_MAVEN_VERSION_RELEASE=" >> ant_dynvar_$CI_JOB_ID.env
  build_snapshot:
    - >
      if [[ $where_trigger_ant_build == "." ]]; then
        echo "Build.xml in the root directory"
      else
        cd $where_trigger_ant_build
        echo "Build.xml in the $where_trigger_ant_build directory"
        ls -la
      fi
    - echo "ant -buildfile $where_is_build_xml $ANT_TARGET_SNAPSHOT -Dversion=${artifact_version} $ANT_CUSTOM_PARAMETERS_SNAPSHOT $ANT_EXTRA_PARAMETERS_SNAPSHOT"
    - ant -buildfile $where_is_build_xml $ANT_TARGET_SNAPSHOT -Dversion=${artifact_version} $ANT_CUSTOM_PARAMETERS_SNAPSHOT $ANT_EXTRA_PARAMETERS_SNAPSHOT
    - cd $CI_PROJECT_DIR
  build_release:
    - >
      if [[ $where_trigger_ant_build == "." ]]; then
        echo "Build.xml in the root directory"
      else
        cd $where_trigger_ant_build
        echo "Build.xml in the $where_trigger_ant_build directory"
        ls -la
      fi
    - echo "ant -buildfile $where_is_build_xml $ANT_TARGET_RELEASE -Dversion=${artifact_version} $ANT_CUSTOM_PARAMETERS_RELEASE $ANT_EXTRA_PARAMETERS_RELEASE"
    - ant -buildfile $where_is_build_xml $ANT_TARGET_RELEASE -Dversion=${artifact_version} $ANT_CUSTOM_PARAMETERS_RELEASE $ANT_EXTRA_PARAMETERS_RELEASE
    - cd $CI_PROJECT_DIR
  script_snapshot_archive:
    - date
    - |
      if [[ "$DEPLOY_ARCHIVE_FILE_ZIP_SNAPSHOT" == "" ]]; then
        echo "Part with archiving skiped"
      else
        Archives snapshot
      fi
  script_release_archive:
    - date
    - |
      if [[ "$DEPLOY_ARCHIVE_FILE_ZIP_RELEASE" == "" ]]; then
        echo "Part with archiving skiped"
      else
        Archives release
      fi
  script_upload:
    - date
    - Publish-Artifacts $DEPLOY_FILE_MAVEN_PIPELINE
    
.release_common_template_ant_SBC_verify:
  after_script:
    - >
       if [[ $SBC == "true" ]]; then
         echo "-----------------------------------------------------------------------------------------"
         export UBSCTL_FINGERPRINT_ARTIFACTS=$(cat $CI_PROJECT_DIR/ant_dynvar_$CI_JOB_ID.env | grep UBSCTL_FINGERPRINT_ARTIFACTS | cut -d'=' -f2)
         /ubsctl_wrappers/ubsctl fingerprint verify $UBSCTL_FINGERPRINT_ARTIFACTS || true
        echo "-----------------------------------------------------------------------------------------"
       fi

.ant_build_custom:
  post_build_snapshot:
    - echo "Custom part after snapshot build"

  post_build_release:
    - echo "Custom part after release build"
